#! /usr/bin/env python
# encoding: utf-8

def options(opt):
    opt.load('compiler_c compiler_cxx')
    opt = opt.add_option_group('Options')

    # opt.add_option('--cryptopp-include',
    #                action = 'store',
    #                default = '/usr/local/opt/cryptopp/include',
    #                dest = 'cryptopp_inc',
    #                help = '''CryptoPP library include path''')

    opt.add_option('--with-tests',
                   action = 'store_true',
                   default = False,
                   dest = 'with_tests',
                   help = '''Compile unit tests''')

def configure(conf):
    conf.load('compiler_c compiler_cxx')

    # openssl header is needed but not library
    #conf.check_cxx(lib = 'ssl', define_name = 'HAVE_SSL', use = 'OPENSSL', uselib_store = 'openssl', mandatory = True)
    conf.check_cxx(header_name = 'cryptopp/aes.h')
    conf.check_cxx(lib = 'cryptopp', define_name = 'HAVE_CRYPTOPP', uselib_store = 'cryptopp', mandatory = True)

    if conf.options.with_tests:
        conf.check_cxx(lib = 'gtest', define_name = 'HAVE_GTEST', uselib_store = 'gtest', mandatory = True)

    conf.env['WITH_TESTS'] = conf.options.with_tests
    conf.env.append_value('CXXFLAGS', '-std=c++14');

def build(bld):
    if bld.env['WITH_TESTS']:
        bld(
            features = 'c cxx cxxprogram',
            source   = bld.path.ant_glob('crypto/**/*.cpp', excl = ['crypto/**/*.m.cpp']),
            use      = 'gtest cryptopp',
            target   = 'tests',
            export_includes = '.',
            includes = 'crypto'
        )
        
